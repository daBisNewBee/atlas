
动态部署的几个操作步骤记录：

1. ./gradlew clean assembleDebug

# 必须发布！关系到生成的patch使用的基线ap版本
2. ./gradlew publishToMavenLocal

3. adb uninstall com.taobao.demo

4. adb install app/build/outputs/apk/debug/app-debug.apk

5. do some change.
/*
 <string name="hello_blank_fragment">this is bbbbb fragment of firstBundle.
 this is patch.</string>

 firbundle.grale:
 verison: 1.0.2 -> 1.0.3
*/

6. 生成patch等文件
./gradlew clean assembleDebug -DapVersion=1.0.0 -DversionName=1.0.1

7. 推送到手机sdcard
adb push app/build/outputs/tpatch-debug/update-1.0.0.json /sdcard/Android/data/com.taobao.demo/cache/update-1.0.0.json
adb push app/build/outputs/tpatch-debug/patch-1.0.1@1.0.0.tpatch /sdcard/Android/data/com.taobao.demo/cache/patch-1.0.1@1.0.0.tpatch

8. demo应用"动态部署"

#######################################################################
以下参考：
"动态部署失败排查指南"
https://alibaba.github.io/atlas/faq/dynamic_failed_help.html

patch变更参考"tpatch-diff.patch"
成功部署后，可以反应在如下配置上，也可用于部署失败后的排查：
1. 打包产物检查
1.1 依赖变动：
userdeMacBook-Pro:outputs user$ cat dependencyDiff.json
{
	"awbDiffs":["com.atlas.demo:firstbundle"],
	"mainDexDiffs":["com.atlas.demo:splashscreen(1.0.1@aar=>1.0.2@aar)"],
	"modifyLines":[
		"com.atlas.demo:firstbundle(1.0.1=>1.0.2)"
	],
	"newAwbs":[]
}
需要确认：firstbundle 和 splashscreen 的版本变化和改动一致
1.2. 验证配置文件
其实是版本确认，和"srcUnitTag 和 unittag"确认（即："当前patch的srcUnitTag等于上一个的unitTag"）
userdeMacBook-Pro:tpatch-debug user$ cat update-1.0.0.json
{
	"baseVersion":"1.0.0",
	"updateBundles":[
		{
			"dependency":[
				"com.taobao.publicBundle"
			],
			"isMainDex":false,
			"name":"com.taobao.firstbundle",
			"srcUnitTag":"3fw0eqtjlkwgr",
			"unitTag":"38e53mm0ds52w",
			"version":"1.0.0@1.0.2"
		},
		{
			"isMainDex":true,
			"name":"com.taobao.maindex",
			"srcUnitTag":"1n3sxtid8eskv",
			"unitTag":"1qt991miywj0m",
			"version":"1.0.0@1.0.1"
		}
	],
	"updateVersion":"1.0.1"
}
其中，baseVersion(1.0.0), updateVersion(1.0.1),
分别对应打包命令的apVersion和versionName,表明是1.0.0->1.0.1的diff信息。

tag确认，比如上述firstBundle中的srcUnitTag等于
"atlasFrameworkProperties.json"（来自于maven中"AP-debug-1.0.0.ap"解压后文件）中对应bundle中的"unique_tag"
1.3. diff代码验证.(TODO: 验证失败)
解压"patch-1.0.1@1.0.0.tpatch"
应该：
first中只有 FirstBundleFragment.class
main只只有 WelcomeActivity.class
即，"改了几个类这里就会对应diff出几个，不会多也不会少"
实际：
first中有FirstBundleFragment.class(且缺少patch中的修改)、Sexy.class
main中有AtlasBundleInfoGenerator.class、FrameworkProperties.class。无WelcomeActivity.class

2. 客户端检查
主要检查本地两个产物"updateinfo"、"bundle.zip"
位于：
/data/data/com.taobao.demo/files/bundleBaseline/updateinfo
/data/data/com.taobao.demo/files/storage/com.taobao.firstbundle/38e53mm0ds52w/bundle.zip
内容：
cat updateinfo:
1.0.1Fcom.taobao.firstbundle@38e53mm0ds52w;com.taobao.maindex@1qt991miywj0m;
即："动态部署版本+bundle包名@当前patch的unittag（update-1.0.0.json中可查到）";重复前面

bundle.zip为合并后的产物:
即：解压后检查class应当包括patch的修改。
比如：
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    paramLayoutInflater = paramLayoutInflater.inflate(R.layout.fragment_blank, paramViewGroup, false);
    Log.v("bb", "this is add by dexpatch. second patch.");
    Log.v("bb", "create Sexy:" + new Sexy());
    Log.v("bb", "add by tpatch."); // 此行新增！！！
    return paramLayoutInflater;
  }

#######################################################################

基线ap构成：
userdeMacBook-Pro:1.0.0 user$ cp AP-debug-1.0.0.ap AP-debug-1.0.0.zip
userdeMacBook-Pro:1.0.0 user$ unzip AP-debug-1.0.0.zip -d AP-debug-1.0.0
Archive:  AP-debug-1.0.0.zip
  inflating: AP-debug-1.0.0/apk-files.txt
  inflating: AP-debug-1.0.0/android.apk
  inflating: AP-debug-1.0.0/AndroidManifest.xml
  inflating: AP-debug-1.0.0/build.txt
  inflating: AP-debug-1.0.0/dependencies.txt
  inflating: AP-debug-1.0.0/version.properties
  inflating: AP-debug-1.0.0/R.txt
   creating: AP-debug-1.0.0/awo/
  inflating: AP-debug-1.0.0/awo/com.taobao.firstbundle.R.txt
 extracting: AP-debug-1.0.0/awo/com.taobao.publicBundle.R.txt
  inflating: AP-debug-1.0.0/awo/dependencyTree.json
  inflating: AP-debug-1.0.0/awo/com.taobao.secondbundle.R.txt
  inflating: AP-debug-1.0.0/awo/com.taobao.remotebunle.R.txt
  inflating: AP-debug-1.0.0/awo/com.taobao.databindbundle.R.txt
   creating: AP-debug-1.0.0/remotebundles/
  inflating: AP-debug-1.0.0/remotebundles/libcom_taobao_remotebunle.so
  inflating: AP-debug-1.0.0/atlasFrameworkProperties.json
  inflating: AP-debug-1.0.0/packageIdFile.properties

注意：
（前提：修改firstBundle中的字符串后进行的部署）
1. 动态部署需要的几个最终产物：
update-1.0.0.json
patch-1.0.1@1.0.0.tpatch

其中，tpatch是个压缩文件，解压后：
userdeMacBook-Pro:tpatch-debug user$ unzip patch-1.0.1\@1.0.0.tpatch -d tmp
Archive:  patch-1.0.1@1.0.0.tpatch
  inflating: tmp/libcom_taobao_firstbundle/resources.arsc
  inflating: tmp/patchInfo
  inflating: tmp/libcom_taobao_maindex.so

需要注意与dexPatch下的不同，dexPatch只有class文件

libcom_taobao_maindex.so也是一个压缩文件：
userdeMacBook-Pro:tmp user$ unzip libcom_taobao_maindex.so -d libcom_taobao_maindex
Archive:  libcom_taobao_maindex.zip
  inflating: libcom_taobao_maindex/resources.arsc
  inflating: libcom_taobao_maindex/AndroidManifest.xml
  inflating: libcom_taobao_maindex/classes.dex
  inflating: libcom_taobao_maindex/assets/bundleInfo-1.0.1.json

反编译dex后的文件：(与dexPatch模式下不同)
AtlasBundleInfoGenerator.class
FrameworkProperties.class

#######################################################################



1、 app的build.gradle的语句"version = getEnvValue("versionName", "1.0.0");"中修改想要生成的app的versionName（默认为1.0.0）

    app目录下执行../gradlew clean assembleDebug 生成apk  (windows 环境的命令为 ..\gradlew.bat clean assembleDebug  以下类同)

2、 app目录下执行../gradlew publish 将跟apk同目录的ap文件发布到仓库,此时ap的版本是1.0.0

3、 手机上安装生成的apk，同时进到动态部署界面（侧边栏里面划开点击进入),且手机连接电脑adb（确保adb devices可见）

///////////////////////////////^^^^^^^准备工作^^^^^^^^^^////////////////////////

4、 进行一些想要的修改（不支持manifest的修改），改动完成后需要升级一下对应bundle/lib的版本号

5、 app工程目录下执行../gradlew clean assembleDebug -DapVersion=apVersion -DversionName=newVersion,
    其中apVersion为之前打的完整apk的版本，newVersion为此次动态部署要生成的新的版本号，
    例如命令 ../gradlew clean assembleDebug -DapVersion=1.0.0 -DversionName=1.0.1

6、 检查build/output/tpatch-debug 目录下文件是否生成，然后执行下面的命令(以下为mac下的命令，windows请修改文件分隔符)
    (根据你手机的当前版本推送对应版本的update-**.json,和对应的tpatch文件)
    例如，这时是第1次部署，versionName是1.0.0，所以命令行是:
    adb push build/outputs/tpatch-debug/update-1.0.0.json /sdcard/Android/data/com.taobao.demo/cache/update-1.0.0.json
    adb push build/outputs/tpatch-debug/patch-1.0.1@1.0.0.tpatch /sdcard/Android/data/com.taobao.demo/cache/patch-1.0.1@1.0.0.tpatch

7、 点击动态部署页面红色按钮执行动态部署,生效后app的versionName变为了1.0.1

8、 后续继续做想要的修改，我们要变成1.0.2 (某个bundle做动态部署的时候请更新版本号(versionName)，因为差量会基于版本号对比)
	../gradlew clean assembleDebug -DapVersion=1.0.0 -DversionName=1.0.2   这时候会生成两个  patch-1.0.2@1.0.0.tpatch  patch-1.0.2@1.0.1.tpatch

	根据你目前的app版本，重复6步骤，推送对应版本的update-**.json,和对应的tpatch文件。

	例如: 如果这时你app的versionName是1.0.1
你的命令行就是:
    adb push build/outputs/tpatch-debug/update-1.0.1.json /sdcard/Android/data/com.taobao.demo/cache/update-1.0.1.json
    adb push build/outputs/tpatch-debug/patch-1.0.2@1.0.1.tpatch /sdcard/Android/data/com.taobao.demo/cache/patch-1.0.2@1.0.1.tpatch

如果这时你app的versionName是1.0.0,也就是还是基线版本
你的命令行就是:
    adb push build/outputs/tpatch-debug/update-1.0.0.json /sdcard/Android/data/com.taobao.demo/cache/update-1.0.0.json
    adb push build/outputs/tpatch-debug/patch-1.0.2@1.0.0.tpatch /sdcard/Android/data/com.taobao.demo/cache/patch-1.0.2@1.0.0.tpatch


9、 后续继续做想要的修改，我们要变成1.0.3 (某个bundle做动态部署的时候请更新版本号，因为差量会基于版本号对比)
	../gradlew clean assembleDebug -DapVersion=1.0.0 -DversionName=1.0.3   这时候会生成三个  patch-1.0.3@1.0.2.tpatch  patch-1.0.3@1.0.1.tpatch  patch-1.0.3@1.0.0.tpatch

	根据你目前的app版本，重复6步骤，推送对应版本的update-**.json,和对应的tpatch文件。	

10、 如果做了多次动态部署后，需要从头开始测试，请先清除AtlasDemo根目录下的hisTpatch文件夹。
